{{>layouts/header}}

<form id="userForm" class="container">
    <div class="mb-3">
        <label class="form-label" for="loginId">회원 아이디</label>
        <input type="text" class="form-control" id="loginId" name="loginId">
        <button type="button" id="checkDuplicateButton" class="btn btn-secondary">중복 체크</button>
        <div id="duplicateCheckResult"></div>
    </div>
    <div class="mb-3">
        <label class="form-label" for="password">비밀번호</label>
        <input type="text" class="form-control" id="password" name="password">
    </div>
    <div class="mb-3">
        <label class="form-label" for="nickname">닉네임</label>
        <input type="text" class="form-control" id="nickname" name="nickname">
        <button type="button" id="checkNicknameDuplicateButton" class="btn btn-secondary">중복 체크</button>
        <div id="nicknameDuplicateCheckResult"></div>
    </div>
    <div class="mb-3">
        <label class="form-label" for="name">이름</label>
        <input type="text" class="form-control" id="name" name="name">
    </div>
    <div class="mb-3">
        <label class="form-label" for="age">나이</label>
        <input type="text" class="form-control" id="age" name="age">
    </div>
    <div class="mb-3">
        <label class="form-label" for="phonenumber">전화번호</label>
        <input type="text" class="form-control" id="phonenumber" name="phonenumber">
    </div>
    <div class="mb-3">
        <label class="form-label" for="email">이메일</label>
        <input type="text" class="form-control" id="email" name="email">
    </div>
    <button type="button" id="submitButton" class="btn btn-primary">입력</button>
    <a href="/session-login" class="btn btn-danger">돌아가기</a>
</form>

{{>layouts/footer}}

<script>
    document.addEventListener('DOMContentLoaded', function () {
    // 회원 아이디 중복 체크 버튼 이벤트 핸들러
    document.getElementById('checkDuplicateButton').addEventListener('click', function () {
        const loginId = document.getElementById('loginId').value;
        fetch('/api/users/check-duplicate?loginId=' + encodeURIComponent(loginId))
        .then(response => response.json())
        .then(data => {
            const resultElement = document.getElementById('duplicateCheckResult');
            if (data.isDuplicate) {
                resultElement.textContent = "중복되었습니다";
                resultElement.style.color = "red";
            } else {
                resultElement.textContent = "사용할 수 있는 아이디입니다";
                resultElement.style.color = "green";
            }
        })
        .catch((error) => {
            console.error('실패:', error);
            alert('아이디 중복 체크에 실패했습니다.');
        });
    });

    // 닉네임 중복 체크 버튼 이벤트 핸들러
    document.getElementById('checkNicknameDuplicateButton').addEventListener('click', function () {
        const nickname = document.getElementById('nickname').value;
        fetch('/api/users/check-nickname-duplicate?nickname=' + encodeURIComponent(nickname))
        .then(response => response.json())
        .then(data => {
            const resultElement = document.getElementById('nicknameDuplicateCheckResult');
            if (data.isDuplicate) {
                resultElement.textContent = "중복되었습니다";
                resultElement.style.color = "red";
            } else {
                resultElement.textContent = "사용할 수 있는 닉네임입니다";
                resultElement.style.color = "green";
            }
        })
        .catch((error) => {
            console.error('실패:', error);
            alert('닉네임 중복 체크에 실패했습니다.');
        });
    });

    // 입력 버튼 이벤트 핸들러
    document.getElementById('submitButton').addEventListener('click', function () {
        const formData = new FormData(document.getElementById('userForm'));
        const data = {};
        formData.forEach((value, key) => {
            data[key] = value;
        });

        fetch('/api/users/join', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
        })
        .then(response => {
            if (response.ok) {
                return response.json();
            }
            throw new Error('서버 오류');
        })
        .then(data => {
            console.log('성공:', data);
            window.location.href = '/session-login';
        })
        .catch((error) => {
            console.error('실패:', error);
            alert('사용자 생성에 실패했습니다.');
        });
    });
});
</script>